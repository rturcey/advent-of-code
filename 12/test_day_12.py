from day_12 import parse_lines, sum_combinations

TEST_LINES = [
    "???.### 1,1,3",
    ".??..??...?##. 1,1,3",
    "?#?#?#?#?#?#?#? 1,3,1,6",
    "????.#...#... 4,1,1",
    "????.######..#####. 1,6,5",
    "?###???????? 3,2,1",
]


def test_parse_lines():
    expected = [
        ".???.### [1, 1, 3]",
        ".??..??...?## [1, 1, 3]",
        ".?#?#?#?#?#?#?#? [1, 3, 1, 6]",
        ".????.#...# [4, 1, 1]",
        ".????.######..##### [1, 6, 5]",
        ".?###???????? [3, 2, 1]",
    ]
    result = [s.__str__() for s in parse_lines(TEST_LINES)]
    assert result == expected


def test_compute_regex_pattern():
    expected = [
        "^[.?]*([#?]{1})[.?]+([#?]{1})[.?]+([#?]{3})[.?]*$",
        "^[.?]*([#?]{1})[.?]+([#?]{1})[.?]+([#?]{3})[.?]*$",
        "^[.?]*([#?]{1})[.?]+([#?]{3})[.?]+([#?]{1})[.?]+([#?]{6})[.?]*$",
        "^[.?]*([#?]{4})[.?]+([#?]{1})[.?]+([#?]{1})[.?]*$",
        "^[.?]*([#?]{1})[.?]+([#?]{6})[.?]+([#?]{5})[.?]*$",
        "^[.?]*([#?]{3})[.?]+([#?]{2})[.?]+([#?]{1})[.?]*$",
    ]
    spring_rows = parse_lines(TEST_LINES)
    result = [s.pattern for s in spring_rows]
    assert result == expected


def test_compute_combinations():
    expected = [1, 4, 1, 1, 4, 10]
    spring_rows = parse_lines(TEST_LINES)
    for s in spring_rows:
        s.compute_combinations(0, "")
    result = [s.combinations for s in spring_rows]
    assert result == expected


def test_sum_combinations():
    expected = 21
    result = sum_combinations(TEST_LINES)
    assert result == expected


def test_parse_lines_unfold():
    expected = [
        ".???.###????.###????.###????.###????.### [1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3]",
        ".??..??...?##.?.??..??...?##.?.??..??...?##.?.??..??...?##.?.??..??...?## [1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3]",
        ".?#?#?#?#?#?#?#???#?#?#?#?#?#?#???#?#?#?#?#?#?#???#?#?#?#?#?#?#???#?#?#?#?#?#?#? [1, 3, 1, 6, 1, 3, 1, 6, 1, 3, 1, 6, 1, 3, 1, 6, 1, 3, 1, 6]",
        ".????.#...#...?????.#...#...?????.#...#...?????.#...#...?????.#...# [4, 1, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1]",
        ".????.######..#####.?????.######..#####.?????.######..#####.?????.######..#####.?????.######..##### [1, 6, 5, 1, 6, 5, 1, 6, 5, 1, 6, 5, 1, 6, 5]",
        ".?###??????????###??????????###??????????###??????????###???????? [3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1]",
    ]
    result = [s.__str__() for s in parse_lines(TEST_LINES, True)]
    assert result == expected


def test_sum_combinations_unfold():
    expected = 525152
    result = sum_combinations(TEST_LINES, True)
    assert result == expected
